import telebot
from telebot import types
from dotenv import load_dotenv
import os
import sqlite3
import random
import string

# –∑–∞–≥—Ä—É–∂–∞–µ–º TOKEN –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å TeleBot
bot = telebot.TeleBot(TOKEN)


class SQLighter:
    def __init__(self, user_id):
        self.database = 'db.db'
        self.con = sqlite3.connect(self.database)
        self.cursor = self.con.cursor()
        self.user_id = user_id

    def add_user(self):
        result_of_execute = self.cursor.execute(f'SELECT * FROM users WHERE user_id = {self.user_id}').fetchall()
        if result_of_execute:
            return
        sqlite_insert_query = f"""INSERT INTO users (user_id)  VALUES  ({self.user_id})"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def add_class(self, key, name):
        result_of_execute = self.cursor.execute(f'SELECT * FROM classes WHERE key = {key}').fetchall()
        if result_of_execute:
            return False
        sqlite_insert_query = f"""INSERT INTO classes (key, name)  VALUES  ({key}, '{name}')"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def add_admin(self, key):
        result_of_execute = self.cursor.execute(f'SELECT id FROM classes WHERE key'
                                                f' = {key}').fetchall()
        id_of_user = self.cursor.execute(f'SELECT id FROM users WHERE'
                                         f' user_id = {self.user_id}').fetchall()
        if not result_of_execute or not id_of_user:
            return False
        sqlite_insert_query = f"""INSERT INTO admins (class_id, admin)  VALUES
          ({result_of_execute[0][0]}, {id_of_user[0][0]})"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def add_user_to_class(self, key):
        class_id = self.cursor.execute(f'SELECT id FROM classes WHERE key'
                                       f' = {key}').fetchall()
        user_id = self.cursor.execute(f'SELECT id FROM users WHERE user_id'
                                      f' = {self.user_id}').fetchall()
        if_user_in_class = self.cursor.execute(f'SELECT * FROM users_in_classes WHERE user_id'
                                               f' = {user_id[0][0]} AND class_id = {class_id[0][0]}').fetchall()
        if not class_id or not user_id or if_user_in_class:
            return
        else:
            sqlite_insert_query = f"""INSERT INTO users_in_classes (user_id, class_id)  VALUES
                      ({user_id[0][0]}, {class_id[0][0]})"""
            self.cursor.execute(sqlite_insert_query)
            self.con.commit()

    def search_class(self, key):
        result_of_execute = self.cursor.execute(f'SELECT name FROM classes WHERE key'
                                                f' = {key}').fetchall()
        if not result_of_execute:
            return False
        else:
            return result_of_execute[0][0]


# –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    # –ø–æ–ª—É—á–∞–µ–º –∏–º—è user –∏ –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è —Å –Ω–∏–º
    user_first_name = str(message.chat.first_name)
    user_id = message.from_user.id
    sqlither = SQLighter(user_id)
    sqlither.add_user()
    buttons = ['üë©‚Äçüè´–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å', 'üë®‚Äçüéì–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å', '‚ùì–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for button in buttons:
        markup.add(button)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SchoolBot,'
                                      f' –ø–æ–ª—å–∑—É–π—Å—è –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ —Å–Ω–∏–∑—Éüëá', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def buttons(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == '‚ùì–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ':
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        bot.send_message(message.chat.id, text='–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ'
                                               ' –∞–¥–º–∏–Ω–∞–º: @Maxb0ttt –∏–ª–∏ @kirmiq.', reply_markup=markup)
    elif message.text == 'üë®‚Äçüéì–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å':
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        sent = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∞—Å—Å–∞(6-–∑–Ω–∞—á–Ω—ã–π –∫–ª—é—á –∏–∑ —Ü–∏—Ñ—Ä):',
                                reply_markup=markup)
        bot.register_next_step_handler(sent, search_class)
    elif message.text == 'üë©‚Äçüè´–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å':
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:', reply_markup=markup)
        bot.register_next_step_handler(sent, create_class)
    elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:')
        bot.register_next_step_handler(sent, make_ad)
    elif message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
        start_message(message)
    else:
        bot.send_message(message.chat.id, text='–ß—Ç–æ-—Ç–æ –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüò•')


def create_class(message):
    try:
        if message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
            return start_message(message)
        creating_key = True
        key = ''
        sqlighter = SQLighter(message.from_user.id)
        while creating_key:
            key = ''.join(random.choice(string.digits) for _ in range(6))
            if key[0] != '0':
                if not sqlighter.add_class(key, message.text):
                    creating_key = False
        sqlighter.add_admin(key)
        sqlighter.add_user_to_class(key)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–î–ó', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        markup.add(*buttons)
        bot.send_message(message.chat.id, f'–ö–ª–∞—Å—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í–∞—à –∫–ª—é—á:\n{key}',
                         reply_markup=markup)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å')


def search_class(message):
    try:
        if message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
            return start_message(message)
        key = message.text
        sqlither = SQLighter(message.from_user.id)
        name = sqlither.search_class(key)
        if not name:
            raise Exception
        sqlither.add_user_to_class(key)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–î–ó']
        markup.add(*buttons)
        bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ "{name}"',
                         reply_markup=markup)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å')


def make_ad(message):
    try:
        if message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
            return start_message(message)
        information = message.text
        con = sqlite3.connect("db.db")
        cur = con.cursor()
        class_id = 21 # –Ω–µ –ø–æ–Ω—è–ª –∫–∞–∫ –∫–ª–∞—Å—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏—Å–∫–∞—Ç—å –Ω—É–∂–Ω—ã–µ
        cur.execute(
            f'SELECT user_id FROM users_in_classes WHERE class_id = {class_id}')
        result = cur.fetchone()
        cur.execute(f'SELECT user_id FROM users WHERE id = {result[0]}')
        res_user_id = cur.fetchone()
        bot.send_message(res_user_id[0], information)

    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')


# –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    print('Bot is working...')
    bot.infinity_polling()

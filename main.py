import telebot
from telebot import types
from dotenv import load_dotenv
import os
import sqlite3
import random
import string

# –∑–∞–≥—Ä—É–∂–∞–µ–º TOKEN –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å TeleBot
bot = telebot.TeleBot(TOKEN)


class SQLighter:
    def __init__(self, user_id):
        self.database = 'db.db'
        self.con = sqlite3.connect(self.database)
        self.cursor = self.con.cursor()
        self.user_id = user_id

    def add_user(self):
        result_of_execute = self.cursor.execute(f'SELECT * FROM users WHERE user_id = {self.user_id}').fetchall()
        if result_of_execute:
            print(result_of_execute)
            return
        sqlite_insert_query = f"""INSERT INTO users (user_id)  VALUES  ({self.user_id})"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def add_class(self, key):
        result_of_execute = self.cursor.execute(f'SELECT * FROM classes WHERE key = {key}').fetchall()
        if result_of_execute:
            return False
        sqlite_insert_query = f"""INSERT INTO classes (key)  VALUES  ({key})"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()


# –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    # –ø–æ–ª—É—á–∞–µ–º –∏–º—è user –∏ –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è —Å –Ω–∏–º
    user_first_name = str(message.chat.first_name)
    user_id = message.from_user.id
    sqlither = SQLighter(user_id)
    sqlither.add_user()
    buttons = ['üë©‚Äçüè´–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å', 'üë®‚Äçüéì–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å', '‚ùì–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for button in buttons:
        markup.add(button)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SchoolBot,'
                                      f' –ø–æ–ª—å–∑—É–π—Å—è –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ —Å–Ω–∏–∑—Éüëá', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def buttons(message):
    if message.text == '‚ùì–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        bot.send_message(message.chat.id, text='–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ'
                                               ' –∞–¥–º–∏–Ω–∞–º: @Maxb0ttt –∏–ª–∏ @kirmiq.', reply_markup=markup)
    elif message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
        start_message(message)
    elif message.text == 'üë®‚Äçüéì–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å':
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∞—Å—Å–∞(6-–∑–Ω–∞—á–Ω—ã–π –∫–ª—é—á –∏–∑ —Ü–∏—Ñ—Ä):')
    elif message.text == 'üë©‚Äçüè´–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:')
        bot.register_next_step_handler(sent, create_class)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–î–ó', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        markup.add(*buttons)
    else:
        bot.send_message(message.chat.id, text='–ß—Ç–æ-—Ç–æ –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüò•')


def create_class(message):
    try:
        creating_key = True
        while creating_key:
            key = ''.join(random.choice(string.digits) for _ in range(6))
            sqlighter = SQLighter(message.from_user.id)
            if key[0] != '0':
                if not sqlighter.add_class(key):
                    creating_key = False
        bot.send_message(message.chat.id, f'–ö–ª–∞—Å—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í–∞—à –∫–ª—é—á:\n`{key}`')
    except Exception:
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å')


# –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    print('Bot is working...')
    bot.infinity_polling()

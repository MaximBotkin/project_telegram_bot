import telebot
from telebot import types
from dotenv import load_dotenv
import os
import sqlite3
import random
import string

# –∑–∞–≥—Ä—É–∂–∞–µ–º TOKEN –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')

ACTIVE_CLASS = ''
SHEDULE_ID = 0

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å TeleBot
bot = telebot.TeleBot(TOKEN)


class SQLighter:
    global ACTIVE_CLASS, SHEDULE_ID

    def __init__(self, user_id):
        self.database = 'db.db'
        self.con = sqlite3.connect(self.database)
        self.cursor = self.con.cursor()
        self.user_id = user_id

    def add_class(self, key, name):
        result_of_execute = self.cursor.execute(f'SELECT * FROM classes WHERE key = {key}').fetchall()
        if result_of_execute:
            return False
        sqlite_insert_query = f"""INSERT INTO classes (key, name)  VALUES  ({key}, '{name}')"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def add_admin(self, key):
        result_of_execute = self.cursor.execute(f'SELECT id FROM classes WHERE key'
                                                f' = {key}').fetchall()
        if not result_of_execute:
            return False
        sqlite_insert_query = f"""INSERT INTO admins (class_id, admin)  VALUES
          ({result_of_execute[0][0]}, {self.user_id})"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def add_user_to_class(self, key):
        class_id = self.cursor.execute(f'SELECT id FROM classes WHERE key'
                                       f' = {key}').fetchall()
        if_user_in_class = self.cursor.execute(f'SELECT * FROM users_in_classes WHERE user_id'
                                               f' = {self.user_id} AND class_id = {class_id[0][0]}').fetchall()

        if not class_id or if_user_in_class:
            return
        else:
            sqlite_insert_query = f"""INSERT INTO users_in_classes (user_id, class_id)  VALUES
                              ({self.user_id}, {class_id[0][0]})"""
            self.cursor.execute(sqlite_insert_query)
            self.con.commit()

    def search_class(self, key):
        result_of_execute = self.cursor.execute(f'SELECT name FROM classes WHERE key'
                                                f' = {key}').fetchall()
        return result_of_execute[0][0] if result_of_execute else False

    def search_id_class(self, key):
        result_of_execute = self.cursor.execute(f'SELECT id FROM classes WHERE key'
                                                f' = {key}').fetchall()
        return result_of_execute[0][0] if result_of_execute else False

    def search_user_classes(self):
        result_of_execute = self.cursor.execute(f'SELECT name FROM classes INNER JOIN users_in_classes'
                                                f' ON id = class_id WHERE user_id = {self.user_id}').fetchall()
        return result_of_execute if result_of_execute else False

    def user_is_admin(self, key):
        result_of_execute = self.cursor.execute(f'SELECT * FROM admins INNER JOIN classes'
                                                f' ON class_id = id WHERE admin = {self.user_id}'
                                                f' AND key = {key}').fetchall()
        return True if result_of_execute else False

    def search_users_in_class(self, key):
        result_of_execute = self.cursor.execute(
            f'SELECT user_id FROM users_in_classes WHERE class_id ='
            f' (SELECT id FROM classes WHERE key = {key})').fetchall()
        return result_of_execute if result_of_execute else False

    def create_new_admin(self, new_admins):
        global ACTIVE_CLASS
        class_id_from_active = self.cursor.execute(f'SELECT id FROM classes WHERE key = {ACTIVE_CLASS}').fetchone()
        result_of_execute = f'INSERT INTO admins (class_id, admin)  VALUES({class_id_from_active[0]}, {new_admins});'
        self.cursor.execute(result_of_execute)
        self.con.commit()
        return result_of_execute if result_of_execute else False

    def add_shedule(self, key):
        class_id = self.search_id_class(key)
        sqlite_insert_query = f"""INSERT INTO shedule (class_id) VALUES ({class_id})"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def add_shedule_on_day(self, day, text):
        class_id = self.search_id_class(ACTIVE_CLASS)
        sqlite_insert_query = f"""UPDATE shedule SET {day} = '{text}' WHERE class_id = {class_id}"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def search_shedule(self, key):
        result_of_execute = self.cursor.execute(f'SELECT * FROM shedule'
                                                f' WHERE class_id = (SELECT id FROM'
                                                f' classes WHERE key = {key})').fetchall()
        return result_of_execute if result_of_execute else False

    def search_shedule_for_day(self, shedule_id, day):
        result_of_execute = self.cursor.execute(f'SELECT {day} FROM shedule WHERE '
                                                f'id = {shedule_id}').fetchall()
        return result_of_execute if result_of_execute else False

    def create_new_homework(self, key, homework, date):
        global ACTIVE_CLASS
        sqlite_insert_query = f"""INSERT INTO homework (id, date, homework, class_id) VALUES ({key}, {date}, {homework}, {ACTIVE_CLASS})"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()


# –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    # –ø–æ–ª—É—á–∞–µ–º –∏–º—è user –∏ –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è —Å –Ω–∏–º
    user_first_name = str(message.chat.first_name)
    buttons = ['üë©‚Äçüè´–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å', 'üë®‚Äçüéì–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å', '‚ùì–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ', '–í–∞—à–∏ –∫–ª–∞—Å—Å—ã', '–ü–æ–ª—É—á–∏—Ç—å id']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for button in buttons:
        markup.add(button)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SchoolBot,'
                                      f' –ø–æ–ª—å–∑—É–π—Å—è –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ —Å–Ω–∏–∑—Éüëá', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def buttons(message):
    global ACTIVE_CLASS, SHEDULE_ID
    sqlighter = SQLighter(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == '‚ùì–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ':
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        bot.send_message(message.chat.id, text='–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ'
                                               ' –∞–¥–º–∏–Ω–∞–º: @Maxb0t –∏–ª–∏ @kirmiq.', reply_markup=markup)
    elif message.text == 'üë®‚Äçüéì–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å':
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        sent = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∞—Å—Å–∞(6-–∑–Ω–∞—á–Ω—ã–π –∫–ª—é—á –∏–∑ —Ü–∏—Ñ—Ä):',
                                reply_markup=markup)
        bot.register_next_step_handler(sent, search_class)
    elif message.text == 'üë©‚Äçüè´–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å':
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:', reply_markup=markup)
        bot.register_next_step_handler(sent, create_class)
    elif message.text == '–í–∞—à–∏ –∫–ª–∞—Å—Å—ã':
        list_of_classes(message)
    elif message.text == '–û–±—ä—è–≤–ª–µ–Ω–∏–µ':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(sent, make_ad)
    elif message.text == '–î–ó':
        homework(message)
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –î–ó':
        sent = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –î–ó –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ')
        bot.register_next_step_handler(sent, add_homework)
    elif message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        shedule(message)
    elif message.text == 'üö´–ù–∞–∑–∞–¥':
        back(message)
    elif message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
        start_message(message)
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å id':
        bot.send_message(message.chat.id, f'–í–∞—à id: {message.chat.id}')
    elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        settings(message)
    elif message.text == '‚ùå–ù–∞–∑–∞–¥':
        shedule(message)
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=markup)
        bot.register_next_step_handler(sent, new_admin)
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        if not sqlighter.search_shedule(ACTIVE_CLASS):
            sqlighter.add_shedule(ACTIVE_CLASS)
            buttons = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                       '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
            markup.add(*buttons)
            sent = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:', reply_markup=markup)
            bot.register_next_step_handler(sent, add_shedule)
        else:
            bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.')
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        shedule(message)
    elif message.text == 'üö´–ù–∞–∑–∞–¥':
        shedule(message)
    else:
        bot.send_message(message.chat.id, text='–ß—Ç–æ-—Ç–æ –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüò•')


def back(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–î–ó', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–û–±—ä—è–≤–ª–µ–Ω–∏–µ', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
    markup.add(*buttons)
    bot.send_message(message.chat.id, text='üëÄ–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=markup)


def create_class(message):
    global ACTIVE_CLASS
    try:
        if message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
            return start_message(message)
        creating_key = True
        key = ''
        sqlighter = SQLighter(message.from_user.id)
        while creating_key:
            key = ''.join(random.choice(string.digits) for _ in range(6))
            if key[0] != '0':
                if not sqlighter.add_class(key, message.text):
                    creating_key = False
        ACTIVE_CLASS = key
        sqlighter.add_admin(key)
        sqlighter.add_user_to_class(key)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–î–ó', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–û–±—ä—è–≤–ª–µ–Ω–∏–µ', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
        markup.add(*buttons)
        bot.send_message(message.chat.id, f'–ö–ª–∞—Å—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í–∞—à –∫–ª—é—á:\n{key}',
                         reply_markup=markup)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å')


def search_class(message):
    global ACTIVE_CLASS
    if message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
        return start_message(message)
    try:
        key = message.text
        sqlither = SQLighter(message.from_user.id)
        name = sqlither.search_class(key)
        if not name:
            raise Exception
        if sqlither.user_is_admin(key):
            sqlither.add_user_to_class(key)
            ACTIVE_CLASS = key
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–î–ó', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                       '–û–±—ä—è–≤–ª–µ–Ω–∏–µ', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
            markup.add(*buttons)
            bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ "{name}"',
                             reply_markup=markup)
        else:
            sqlither.add_user_to_class(key)
            ACTIVE_CLASS = key
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–î–ó', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
            markup.add(*buttons)
            bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ "{name}"',
                             reply_markup=markup)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å')


def make_ad(message):
    global ACTIVE_CLASS
    sqlighter = SQLighter(message.from_user.id)
    ids = sqlighter.search_users_in_class(ACTIVE_CLASS)
    for id in ids:
        if id[0] != message.from_user.id:
            bot.send_message(id[0], message.text)
        else:
            bot.send_message(message.chat.id, text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            back(message)


def new_admin(message):
    global ACTIVE_CLASS
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
    try:
        new_admins = message.text
        sqlighter = SQLighter(message.from_user.id)
        sqlighter.create_new_admin(new_admins)
        bot.send_message(message.chat.id, '–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞')


def settings(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', 'üö´–ù–∞–∑–∞–¥', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
        markup.add(*buttons)
        bot.send_message(message.chat.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=markup)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')


def list_of_classes(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    try:
        sqlighter = SQLighter(message.from_user.id)
        classes = sqlighter.search_user_classes()
        if not classes:
            raise Exception
        else:
            klass = []
            for clas in classes:
                klass.append(f'"{clas[0]}"')
            markup.add(*klass)
            markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
            bot.send_message(message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞—Å—Å–∞—Ö: {", ".join(klass)}.',
                             reply_markup=markup)
    except Exception as e:
        print(e)
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–µ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ',
                         reply_markup=markup)


def shedule(message):
    global ACTIVE_CLASS, SHEDULE_ID
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        sqlighter = SQLighter(message.from_user.id)
        shedule = sqlighter.search_shedule(ACTIVE_CLASS)
        if shedule:
            buttons = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                       '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                       'üö´–ù–∞–∑–∞–¥', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
            markup.add(*buttons)
            sent = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:', reply_markup=markup)
            SHEDULE_ID = shedule[0][0]
            bot.register_next_step_handler(sent, send_shedule)
        else:
            buttons1 = ['–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üö´–ù–∞–∑–∞–¥']
            markup.add(*buttons1)
            bot.send_message(message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.',
                             reply_markup=markup)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')


def send_shedule(message):
    global SHEDULE_ID
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        buttons = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                   '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
        markup.add(*buttons)
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        sent = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:', reply_markup=markup)
        return bot.register_next_step_handler(sent, add_shedule)
    elif message.text == 'üö´–ù–∞–∑–∞–¥':
        return back(message)
    elif message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
        return start_message(message)
    markup.add('‚ùå–ù–∞–∑–∞–¥')
    markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
    sqlighter = SQLighter(message.from_user.id)
    if message.text == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'monday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    elif message.text == '–í—Ç–æ—Ä–Ω–∏–∫':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'tuesday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    elif message.text == '–°—Ä–µ–¥–∞':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'wednesday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    elif message.text == '–ß–µ—Ç–≤–µ—Ä–≥':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'thursday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    elif message.text == '–ü—è—Ç–Ω–∏—Ü–∞':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'friday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    elif message.text == '–°—É–±–±–æ—Ç–∞':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'saturday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!')


def add_shedule(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('‚ùå–ù–∞–∑–∞–¥')
    markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
    if message.text == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_monday)
    elif message.text == '–í—Ç–æ—Ä–Ω–∏–∫':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_tuesday)
    elif message.text == '–°—Ä–µ–¥–∞':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_wednesday)
    elif message.text == '–ß–µ—Ç–≤–µ—Ä–≥':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_thursday)
    elif message.text == '–ü—è—Ç–Ω–∏—Ü–∞':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_friday)
    elif message.text == '–°—É–±–±–æ—Ç–∞':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_saturday)
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!')


def add_shedule_on_monday(message):
    try:
        sqlighter = SQLighter(message.from_user.id)
        sqlighter.add_shedule_on_day('monday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


def add_shedule_on_tuesday(message):
    try:
        sqlighter = SQLighter(message.from_user.id)
        sqlighter.add_shedule_on_day('tuesday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


def add_shedule_on_wednesday(message):
    try:
        sqlighter = SQLighter(message.from_user.id)
        sqlighter.add_shedule_on_day('wednesday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


def add_shedule_on_thursday(message):
    try:
        sqlighter = SQLighter(message.from_user.id)
        sqlighter.add_shedule_on_day('thursday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


def add_shedule_on_friday(message):
    try:
        sqlighter = SQLighter(message.from_user.id)
        sqlighter.add_shedule_on_day('friday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


def add_shedule_on_saturday(message):
    try:
        sqlighter = SQLighter(message.from_user.id)
        sqlighter.add_shedule_on_day('saturday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


def homework(message):
    global ACTIVE_CLASS
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–î–æ–±–∞–≤–∏—Ç—å –î–ó', '–£–∑–Ω–∞—Ç—å –î–ó', 'üö´–ù–∞–∑–∞–¥']
    markup.add(*buttons)
    bot.send_message(message.chat.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', reply_markup=markup)


def add_homework(message):
    global ACTIVE_CLASS
    try:
        creating_key = True
        key = ''
        sqlighter = SQLighter(message.from_user.id)
        while creating_key:
            key = ''.join(random.choice(string.digits) for _ in range(6))
            if key[0] != '0':
                if not sqlighter.add_class(key, message.text):
                    creating_key = False
        date, homework = map(str, message.text.split())
        sqlighter.create_new_homework(key, date, homework)

    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ')


# –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    print('Bot is working...')
    bot.infinity_polling()
